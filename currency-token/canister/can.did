type Controllers = vec principal;
type Payload = opt blob;
type TaskId = nat64;

type ControllerList = record {
    mint_controllers : Controllers;
    info_controllers : Controllers;
};

type Iterations = variant {
    Infinite;
    Exact : nat64;
};

type SchedulingInterval = record {
    duration_nano : nat64;
    iterations : Iterations;
};

type TransferEntry = record {
    to : principal;
    qty : nat64;
    event_payload : Payload;
    recurrence : opt SchedulingInterval;
};

type DequeueRecurrentTaskRequest = record {
    task_ids : vec TaskId;
};

type DequeueRecurrentTaskResponse = record {
    succeed : vec bool;
};

type GetRecurrentTransferTasksRequest = record {
    owner : principal;
};

type RecurrentTransferTask = record {
    task_id : TaskId;
    from : principal;
    to : principal;
    qty : nat64;
    event_payload : Payload;
    scheduled_at : nat64;
    rescheduled_at : opt nat64;
    scheduling_interval : SchedulingInterval;
};

type RecurrentMintTask = record {
    task_id : TaskId;
    to : principal;
    qty : nat64;
    event_payload : Payload;
    scheduled_at : nat64;
    rescheduled_at : opt nat64;
    scheduling_interval : SchedulingInterval;
};

type GetRecurrentTransferTasksResponse = record {
    tasks : vec RecurrentTransferTask;
};

type GetRecurrentMintTasksResponse = record {
    tasks : vec RecurrentMintTask;
};

type TokenInfo = record {
    name : text;
    symbol : text;
    decimals : nat8;
};

type InitRequest = record {
    info : TokenInfo;
    default_controllers : opt Controllers;
};

type GetBalanceOfRequest = record {
    account_owner : principal;
};
type GetBalanceOfResponse = record {
    balance : nat64;
};

type GetTotalSupplyResponse = record {
    total_supply : nat64;
};

type GetInfoResponse = record {
    info : TokenInfo;
};

type UpdateInfoRequest = record {
    new_info : TokenInfo;
};
type UpdateInfoResponse = record {
    old_info : TokenInfo;
};

type GetControllersResponse = record {
    controllers : ControllerList;
};

type UpdateControllersRequest = record {
    new_controllers : Controllers;
};
type UpdateControllersResponse = record {
    old_controllers : Controllers;
};

type TransferRequest = record {
    entries : vec TransferEntry;
};

type BurnRequest = record {
    qty : nat64;
    event_payload : Payload;
};

service : (InitRequest) -> {
    "mint" : (TransferRequest) -> ();
    "transfer" : (TransferRequest) -> ();
    "burn" : (BurnRequest) -> ();
    "get_balance_of" : (GetBalanceOfRequest) -> (GetBalanceOfResponse) query;
    "get_total_supply" : () -> (GetTotalSupplyResponse) query;
    "get_info" : () -> (GetInfoResponse) query;
    "update_info" : (UpdateInfoRequest) -> (UpdateInfoResponse);

    "get_controllers" : () -> (GetControllersResponse) query;
    "update_info_controller" : (UpdateControllersRequest) -> (UpdateControllersResponse);
    "update_mint_controller" : (UpdateControllersRequest) -> (UpdateControllersResponse);

    "dequeue_recurrent_transfer_tasks" : (DequeueRecurrentTaskRequest) -> (DequeueRecurrentTaskResponse);
    "get_recurrent_transfer_tasks" : (GetRecurrentTransferTasksRequest) -> (GetRecurrentTransferTasksResponse) query;
    "dequeue_recurrent_mint_tasks" : (DequeueRecurrentTaskRequest) -> (DequeueRecurrentTaskResponse);
    "get_recurrent_mint_tasks" : () -> (GetRecurrentMintTasksResponse) query;
}
